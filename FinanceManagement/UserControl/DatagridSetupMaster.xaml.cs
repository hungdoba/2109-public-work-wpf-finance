using System;
using System.Collections.ObjectModel;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using FinanceManagement.Function;

namespace FinanceManagement.UserControl
{
    /// <summary>
    /// Interaction logic for DatagridSetupMaster.xaml
    /// </summary>
    public partial class DatagridSetupMaster : System.Windows.Controls.UserControl
    {
        public DatagridSetupMaster()
        {
            InitializeComponent();
        }

        private static DependencyProperty ObjectMastersProperty;

        static DatagridSetupMaster()
        {
            ObjectMastersProperty = DependencyProperty.Register("ObjectMasters", typeof(ObservableCollection<object>), typeof(DatagridSetupMaster), new PropertyMetadata(new ObservableCollection<object>(), null));
        }

        public ObservableCollection<object> ObjectMasters
        {
            get { return (ObservableCollection<object>)GetValue(ObjectMastersProperty); }
            set { SetValue(ObjectMastersProperty, value); }
        }

        public static RoutedEvent RequestMoveEvent = EventManager.RegisterRoutedEvent("RequestMove", RoutingStrategy.Bubble, typeof(RoutedPropertyChangedEventHandler<object>), typeof(DatagridSetupMaster));
        public event RoutedPropertyChangedEventHandler<object> RequestMove
        {
            add { AddHandler(RequestMoveEvent, value); }
            remove { RemoveHandler(RequestMoveEvent, value); }
        }

        private bool isDragging { get; set; }

        private object draggedItem { get; set; }

        private void gridCustomerNameMasterUsed_PreviewMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            var row = UIHelpers.TryFindFromPoint<DataGridRow>((UIElement)sender, e.GetPosition(gridMaster));
            if (row == null) return;
            isDragging = true;
            draggedItem = row.Item;
        }

        private void gridMaster_MouseMove(object sender, MouseEventArgs e)
        {
            if (!isDragging || e.LeftButton != MouseButtonState.Pressed) return;
            if(!popupDragDrop.IsOpen)
            {
                gridMaster.IsReadOnly = true;
                popupDragDrop.IsOpen = true;
            }

            Size popupSize = new Size(popupDragDrop.ActualWidth, popupDragDrop.ActualHeight);
            popupDragDrop.PlacementRectangle = new Rect(e.GetPosition(this), popupSize);

            Point position = e.GetPosition(gridMaster);
            var row = UIHelpers.TryFindFromPoint<DataGridRow>(gridMaster, position);
            if (row != null) gridMaster.SelectedItem = row.Item;
            else reSetDragDrop();
        }

        private void gridMaster_MouseLeftButtonUp(object sender, MouseButtonEventArgs e)
        {
            if (!isDragging) return;
            int indexTarget = gridMaster.SelectedIndex;

            if(ObjectMasters.Contains(draggedItem)) ObjectMasters.Remove(draggedItem);
            ObjectMasters.Insert(indexTarget, draggedItem);
            gridMaster.SelectedItem = draggedItem;

            reSetDragDrop();
        }

        private void reSetDragDrop()
        {
            isDragging = false;
            popupDragDrop.IsOpen = false;
            gridMaster.IsReadOnly = false;
        }

        private void gridMaster_AutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            e.Column.Width = new DataGridLength(1, DataGridLengthUnitType.Star);
            if (e.Column.Header.ToString() == "Name")
            {
                e.Column.Header = "名称";
                e.Column.Width = new DataGridLength(3, DataGridLengthUnitType.Star);
            }
            if (e.Column.Header.ToString() == "ShortName") e.Column.Header = "略称";
            if (e.Column.Header.ToString() == "IsUse") e.Cancel = true;
            if (e.Column.Header.ToString() == "Remark") e.Column.Header = "備考";
        }

        private void gridMaster_AutoGeneratedColumns(object sender, EventArgs e)
        {
            DataTemplate dataTemplate = new DataTemplate();

            var buttonMove = new FrameworkElementFactory(typeof(Button));
            buttonMove.SetValue(Button.ContentProperty, "移転");
            buttonMove.AddHandler(Button.ClickEvent, new RoutedEventHandler(buttonMove_Click));

            dataTemplate.VisualTree = buttonMove;
            DataGridTemplateColumn dataGridTemplateColumn = new DataGridTemplateColumn()
            {
                Header = "移転",
                CellTemplate = dataTemplate,
                Width = new DataGridLength(1, DataGridLengthUnitType.Star)
            };
            gridMaster.Columns.Add(dataGridTemplateColumn);

            if (gridMaster.Columns.Count > 0 && gridMaster.Columns[0].Header.ToString().Contains("移転"))
            {
                gridMaster.Columns.RemoveAt(0);
            }
        }

        private void buttonMove_Click(object sender, RoutedEventArgs e)
        {
            object moveObject = this.gridMaster.SelectedItem;
            ObjectMasters.Remove(moveObject);
            if(moveObject!=null)
            {
                RoutedPropertyChangedEventArgs<object> args = new RoutedPropertyChangedEventArgs<object>(null, moveObject)
                {
                    RoutedEvent = RequestMoveEvent,
                };
                this.RaiseEvent(args);
            }
        }

        private void gridMaster_Sorting(object sender, DataGridSortingEventArgs e)
        {
            if(ObjectMasters != null && ObjectMasters[0] is MMCustomerMaster && e.Column.SortMemberPath == "Name")
            {
                IOrderedEnumerable<object> ordered = ObjectMasters.OrderBy(x => ((MMCustomerMaster)x).Name.Replace("（株）", "").Replace("（有）", ""));

                ObjectMasters = new ObservableCollection<object>();

                foreach (object s in ordered)
                {
                    ObjectMasters.Add(s);
                }

                e.Handled = true;
            }
        }
    }
}
