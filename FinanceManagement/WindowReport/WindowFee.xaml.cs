using System;
using System.Linq;
using System.Windows;
using System.Collections.ObjectModel;
using FinanceManagement.Function;
using System.Windows.Controls;
using System.Windows.Controls.Primitives;
using System.Collections.Generic;

namespace FinanceManagement.WindowReport
{
    /// <summary>
    /// Interaction logic for WindowHQIncomeReport.xaml
    /// </summary>
    public partial class WindowFee: Window
    {

        public string FeeName;

        int cbYearPreviousValue = 0;

        MMFeeTypeStruct cbFeeTypePreviousValue;

        ObservableCollection<MMFee> observableFees;

        ObservableCollection<MMFeeMaster> itemFeeMasters;

        public WindowFee()
        {
            InitializeComponent();
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            lbWindowName.Content = FeeName;

            getFeeType();

            getGridFeeHeader();

            int yearNow = setYear();

            getData(FeeName, cbFeeType.Text, yearNow);

            getItemMaster(FeeName);
        }

        private void getItemMaster(string feeName)
        {
            itemFeeMasters = DatabaseHandler.GetFeeMaster(feeName);
            cbNewField.ItemsSource = itemFeeMasters;
        }

        private void getGridFeeHeader()
        {
            MMFeeStruct mMFieldName = DatabaseHandler.GetFieldName(FeeName);

            colField1.Header = !string.IsNullOrEmpty(mMFieldName.Field1) ? mMFieldName.Field1 : null;
            colField2.Header = !string.IsNullOrEmpty(mMFieldName.Field2) ? mMFieldName.Field2 : null;
            colField3.Header = !string.IsNullOrEmpty(mMFieldName.Field3) ? mMFieldName.Field3 : null;
            colField4.Header = !string.IsNullOrEmpty(mMFieldName.Field4) ? mMFieldName.Field4 : null;
            colField5.Header = !string.IsNullOrEmpty(mMFieldName.Field5) ? mMFieldName.Field5 : null;
            colField6.Header = !string.IsNullOrEmpty(mMFieldName.Field6) ? mMFieldName.Field6 : null;
            colField7.Header = !string.IsNullOrEmpty(mMFieldName.Field7) ? mMFieldName.Field7 : null;
            colField8.Header = !string.IsNullOrEmpty(mMFieldName.Field8) ? mMFieldName.Field8 : null;
            colField9.Header = !string.IsNullOrEmpty(mMFieldName.Field9) ? mMFieldName.Field9 : null;

        }

        private void getFeeType()
        {

            if (string.IsNullOrEmpty(FeeName)) return;

            ObservableCollection<MMFeeTypeStruct> feeTypes = DatabaseHandler.GetFeeTypeStruct(FeeName);

            if(feeTypes == null || feeTypes.Count == 0)
            {
                cbFeeType.IsEnabled = false;
                return;
            }
            else if(feeTypes.Count == 1)
            {
                cbFeeType.IsEnabled = false;
            }
            else
            {
                feeTypes.Add(new MMFeeTypeStruct()
                {
                    FeeType = "合計"
                });
            }

            cbFeeType.ItemsSource = feeTypes;

            if (cbFeeType.ItemsSource != null)
            {
                cbFeeType.SelectedIndex = 0;
            }
        }

        private void getData(string feeName, string feeType, int yearNow)
        {

            if (string.IsNullOrEmpty(FeeName))
            {
                return;
            }

            observableFees = DatabaseHandler.GetFee(feeName, feeType, yearNow);

            gridFee.ItemsSource = observableFees;

            setGridHeader(observableFees, yearNow);

            if (observableFees == null)
            {
                return;
            }

            if (observableFees.Count == 0)
            {
                btnAutoGenerateData.IsEnabled = true;
                btnPrint.IsEnabled = false;
                autoAddFixedFee(feeName, feeType, yearNow);
            }
            else
            {
                btnAutoGenerateData.IsEnabled = false;
                btnAutoGenerateData.Content = "自動データ作成";
                btnPrint.IsEnabled = true;
            }

        }

        private void autoAddFixedFee(string feeName, string feeType, int yearNow)
        {
            observableFees = DatabaseHandler.GetFixedFee(feeName, feeType, yearNow);
            gridFee.ItemsSource = observableFees;

            if (gridFee.Items.Count != 0)
            {
                btnSave.IsEnabled = true;
            }
        }

        private int setYear()
        {
            int yearNow = DateTime.Today.Year;
            for (int i = yearNow; i > 2012; i--)
            {
                _ = cbYear.Items.Add(i);
            }
            cbYear.SelectedIndex = 0;
            return yearNow;
        }

        private void setGridHeader(ObservableCollection<MMFee> mMFees, int year)
        {
            columnMonth1.Header =   (year - 2000 + 1).ToString() + "年１月";
            columnMonth2.Header =   (year - 2000 + 1).ToString() + "年２月";
            columnMonth3.Header =   (year - 2000 + 1).ToString() + "年３月";
            columnMonth4.Header =   (year - 2000).ToString() + "年４月";
            columnMonth5.Header =   (year - 2000).ToString() + "年５月";
            columnMonth6.Header =   (year - 2000).ToString() + "年６月";
            columnMonth7.Header =   (year - 2000).ToString() + "年７月";
            columnMonth8.Header =   (year - 2000).ToString() + "年８月";
            columnMonth9.Header =   (year - 2000).ToString() + "年９月";
            columnMonth10.Header =  (year - 2000).ToString() + "年１０月";
            columnMonth11.Header =  (year - 2000).ToString() + "年１１月";
            columnMonth12.Header =  (year - 2000).ToString() + "年１２月";

            colField1.Visibility = Visibility.Hidden;
            colField2.Visibility = Visibility.Hidden;
            colField3.Visibility = Visibility.Hidden;
            colField4.Visibility = Visibility.Hidden;
            colField5.Visibility = Visibility.Hidden;
            colField6.Visibility = Visibility.Hidden;
            colField7.Visibility = Visibility.Hidden;
            colField8.Visibility = Visibility.Hidden;
            colField9.Visibility = Visibility.Hidden;

            if (observableFees == null || observableFees.Count == 0)
            {
                if (colField1.Header != null)
                {
                    colField1.Visibility = Visibility.Visible;
                }

                if (colField2.Header != null)
                {
                    colField2.Visibility = Visibility.Visible;
                }

                if (colField3.Header != null)
                {
                    colField3.Visibility = Visibility.Visible;
                }

                if (colField4.Header != null)
                {
                    colField4.Visibility = Visibility.Visible;
                }

                if (colField5.Header != null)
                {
                    colField5.Visibility = Visibility.Visible;
                }

                if (colField6.Header != null)
                {
                    colField6.Visibility = Visibility.Visible;
                }

                if (colField7.Header != null)
                {
                    colField7.Visibility = Visibility.Visible;
                }

                if (colField8.Header != null)
                {
                    colField8.Visibility = Visibility.Visible;
                }

                if (colField9.Header != null)
                {
                    colField9.Visibility = Visibility.Visible;
                }
            }
            else
            {
                foreach (MMFee temp in mMFees)
                {
                    if (!string.IsNullOrEmpty(temp.Field1))
                    {
                        colField1.Visibility = Visibility.Visible;
                    }

                    if (!string.IsNullOrEmpty(temp.Field2))
                    {
                        colField2.Visibility = Visibility.Visible;
                    }

                    if (!string.IsNullOrEmpty(temp.Field3))
                    {
                        colField3.Visibility = Visibility.Visible;
                    }

                    if (!string.IsNullOrEmpty(temp.Field4))
                    {
                        colField4.Visibility = Visibility.Visible;
                    }

                    if (!string.IsNullOrEmpty(temp.Field5))
                    {
                        colField5.Visibility = Visibility.Visible;
                    }

                    if (!string.IsNullOrEmpty(temp.Field6))
                    {
                        colField6.Visibility = Visibility.Visible;
                    }

                    if (!string.IsNullOrEmpty(temp.Field7))
                    {
                        colField7.Visibility = Visibility.Visible;
                    }

                    if (!string.IsNullOrEmpty(temp.Field8))
                    {
                        colField8.Visibility = Visibility.Visible;
                    }

                    if (!string.IsNullOrEmpty(temp.Field9))
                    {
                        colField9.Visibility = Visibility.Visible;
                    }
                }
            }

        }

        private void gridFee_CellEditEnding(object sender, DataGridCellEditEndingEventArgs e)
        {
            if (e.EditAction == DataGridEditAction.Commit)
            {

                MMFee workFee = (MMFee)e.Row.Item;

                TextBox textBox = e.EditingElement as TextBox;
                if (!int.TryParse(textBox.Text, out int newValue)) newValue = 0;

                string header = e.Column.Header.ToString();

                if (header.Contains("１０月")) workFee.Month10 = newValue;
                else if (header.Contains("１１月")) workFee.Month11 = newValue;
                else if (header.Contains("１２月")) workFee.Month12 = newValue;
                else if (header.Contains("１月")) workFee.Month1 = newValue;
                else if (header.Contains("２月")) workFee.Month2 = newValue;
                else if (header.Contains("３月")) workFee.Month3 = newValue;
                else if (header.Contains("４月")) workFee.Month4 = newValue;
                else if (header.Contains("５月")) workFee.Month5 = newValue;
                else if (header.Contains("６月")) workFee.Month6 = newValue;
                else if (header.Contains("７月")) workFee.Month7 = newValue;
                else if (header.Contains("８月")) workFee.Month8 = newValue;
                else if (header.Contains("９月")) workFee.Month9 = newValue;

                DatabaseHandler.UpdateSumInFee(ref observableFees);

                btnSave.IsEnabled = true;
            }
        }

        private void btnClose_Click(object sender, RoutedEventArgs e)
        {
            if (btnSave.IsEnabled == true)
            {
                MessageBoxResult messageBoxResult = MessageBox.Show("データを保存しますか？", "報告", MessageBoxButton.YesNoCancel);

                if (messageBoxResult == MessageBoxResult.Cancel)
                    return;
                else if (messageBoxResult == MessageBoxResult.Yes)
                    saveData();
                else
                    btnSave.IsEnabled = false;
            }
            this.Close();
        }

        private void btnSave_Click(object sender, RoutedEventArgs e)
        {
            saveData();
        }

        private void saveData()
        {
            if (observableFees == null || observableFees.Count == 0) return;

            bool saveResult = DatabaseHandler.OverwriteFee(observableFees);

            btnSave.IsEnabled = false;

            if(saveResult == true)
                MessageBox.Show("成功");
            else
                MessageBox.Show("エラー");
        }

        private void btnInsert_Click(object sender, RoutedEventArgs e)
        {

            if (observableFees == null || observableFees.Count == 0) 
            {
                observableFees = new ObservableCollection<MMFee>();
            };

            if (string.IsNullOrEmpty(cbNewField.Text) || cbNewField.Text.Contains("項目名をここに記入"))
            {
                cbNewField.Text = "項目名をここに記入";
                _ = MessageBox.Show("項目を記入してください。");
                return;
            }

            string department = string.Empty;
            if (btnOta.IsChecked == true)
            {
                department = "太田";
            }
            else if (btnHQ.IsChecked == true)
            {
                department = "本社";
            }
            else if (btnSDC.IsChecked == true)
            {
                department = "SDC";
            }
            else if (btnHQWork.IsChecked == true)
            {
                department = "工事";
            }

            MMFee mMFee = new MMFee()
            {
                FeeName = FeeName,
                Department = department,
                FeeType = string.IsNullOrEmpty(cbFeeType.Text) ? FeeName : cbFeeType.Text,
                Item = cbNewField.Text,
                Year = (int)cbYear.SelectedItem,
                Month1 = 0,
                Month2 = 0,
                Month3 = 0,
                Month4 = 0,
                Month5 = 0,
                Month6 = 0,
                Month7 = 0,
                Month8 = 0,
                Month9 = 0,
                Month10 = 0,
                Month11 = 0,
                Month12 = 0,
                Sum = 0,
                Remark = null
            };

            DatabaseHandler.RefMMFeeByFeeMaster(ref mMFee);

            int index = -1;

            foreach(var temp in observableFees)
            {
                if (temp.Department.Contains(department))
                {
                    index = observableFees.IndexOf(temp);
                    if(temp.Item == cbNewField.Text)
                    {
                        _ = MessageBox.Show("項目存在しました、追加ができない。");
                        return;
                    }
                }
            }

            observableFees.Insert(index + 1, mMFee);

            if (index == -1) // Not have value yet
            {
                mMFee = new MMFee()
                {
                    FeeName = FeeName,
                    Department = "合計",
                    Item = department + "合計",
                    FeeType = string.IsNullOrEmpty(cbFeeType.Text) ? FeeName : cbFeeType.Text,
                    Year = (int)cbYear.SelectedItem,
                    Month1 = 0,
                    Month2 = 0,
                    Month3 = 0,
                    Month4 = 0,
                    Month5 = 0,
                    Month6 = 0,
                    Month7 = 0,
                    Month8 = 0,
                    Month9 = 0,
                    Month10 = 0,
                    Month11 = 0,
                    Month12 = 0,
                    Sum = 0,
                    Remark = null
                };

                observableFees.Insert(1, mMFee);

                gridFee.ItemsSource = observableFees;
            }

            btnSave.IsEnabled = true;

        }

        private void btn_Click(object sender, RoutedEventArgs e)
        {
            btnHQ.IsChecked = false;
            btnOta.IsChecked = false;
            btnHQWork.IsChecked = false;
            btnSDC.IsChecked = false;

            ToggleButton toggleButton = (ToggleButton)sender;
            toggleButton.IsChecked = true;

            if(toggleButton.Content.ToString() == "工事")
            {
                cbNewField.ItemsSource = itemFeeMasters.Where(x => x.HQWork);
            }
            else if(toggleButton.Content.ToString() == "本社")
            {
                cbNewField.ItemsSource = itemFeeMasters.Where(x => x.HQ);
            }
            else if(toggleButton.Content.ToString() == "SDC")
            {
                cbNewField.ItemsSource = itemFeeMasters.Where(x => x.SDC);
            }
            else if(toggleButton.Content.ToString() == "太田")
            {
                cbNewField.ItemsSource = itemFeeMasters.Where(x => x.Ota);
            }
        }

        private void btnDeleteRow_Click(object sender, RoutedEventArgs e)
        {
            MMFee mMFee = ((FrameworkElement)sender).DataContext as MMFee;

            if(MessageBox.Show(mMFee.Department + "の" + mMFee.Item + "を削除しますか？","報告", MessageBoxButton.YesNo) == MessageBoxResult.Yes)
            {
                observableFees.Remove(mMFee);
                btnSave.IsEnabled = true;

                DatabaseHandler.UpdateSumInFee(ref observableFees);

            }
        }

        private void btnAllowDeleteRow_Click(object sender, RoutedEventArgs e)
        {
            if(btnAllowDeleteRow.IsChecked == true)
                colDeleteRow.Visibility = Visibility.Visible;
            else
                colDeleteRow.Visibility = Visibility.Hidden;
        }

        //private void txtNewField_GotMouseCapture(object sender, System.Windows.Input.MouseEventArgs e)
        //{
        //    txtNewField.SelectAll();
        //}

        private void cbYear_DropDownClosed(object sender, EventArgs e)
        {

            if (observableFees != null && observableFees.Count != 0 && observableFees[0].Year == (int)cbYear.SelectedItem)
                return;

            if (btnSave.IsEnabled == true)
            {
                MessageBoxResult messageBoxResult = MessageBox.Show("データを保存しますか？", "報告", MessageBoxButton.YesNoCancel);

                if (messageBoxResult == MessageBoxResult.Cancel)
                {
                    cbYear.SelectedItem = cbYearPreviousValue;
                    return;
                }
                else if (messageBoxResult == MessageBoxResult.Yes)
                    saveData();
                else
                {
                    btnSave.IsEnabled = false;
                    btnAutoGenerateData.IsEnabled = false;
                    btnAutoGenerateData.Content = "自動データ作成";
                }
            }

            ComboBox comboBox = (ComboBox)sender;
            getData(FeeName, cbFeeType.Text, (int)comboBox.SelectedItem);
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            if (btnSave.IsEnabled == true)
            {
                MessageBoxResult messageBoxResult = MessageBox.Show("データを保存しますか？", "報告", MessageBoxButton.YesNoCancel);

                if (messageBoxResult == MessageBoxResult.Cancel)
                    e.Cancel = true;
                else if (messageBoxResult == MessageBoxResult.Yes)
                    saveData();
            }
        }

        private void cbFeeType_DropDownClosed(object sender, EventArgs e)
        {

            if (cbFeeType.Text == cbFeeTypePreviousValue.FeeType) return;

            if (observableFees != null && observableFees.Count != 0 && observableFees[0].FeeType == cbFeeType.Text)

                return;

            if (string.IsNullOrEmpty(cbFeeType.Text) || string.IsNullOrEmpty(cbYear.Text))
                return;

            if (btnSave.IsEnabled == true)
            {
                MessageBoxResult messageBoxResult = MessageBox.Show("データを保存しますか？", "報告", MessageBoxButton.YesNoCancel);

                if (messageBoxResult == MessageBoxResult.Cancel)
                {
                    cbFeeType.Text = cbFeeTypePreviousValue.FeeType;
                    return;
                }
                else if (messageBoxResult == MessageBoxResult.Yes)
                    saveData();
                else
                {
                    btnSave.IsEnabled = false;
                    btnAutoGenerateData.IsEnabled = false;
                    btnAutoGenerateData.Content = "自動データ作成";
                }
            }

            getData(FeeName, cbFeeType.Text, (int)cbYear.SelectedItem);

            if (cbFeeType.Text == "合計")
                unEnableButton();
            else
            {
                getGridFeeHeader();
                enableButton();
            }
        }

        private void enableButton()
        {
            btnInsert.IsEnabled = true;
            btnAllowDeleteRow.IsEnabled = true;
            gridFee.IsReadOnly = false;
        }

        private void unEnableButton()
        {
            btnSave.IsEnabled = false;
            btnInsert.IsEnabled = false;
            btnAllowDeleteRow.IsEnabled = false;
            gridFee.IsReadOnly = true;
        }

        private void cbYear_DropDownOpened(object sender, EventArgs e)
        {
            cbYearPreviousValue = (int)cbYear.SelectedItem;
        }

        private void cbFeeType_DropDownOpened(object sender, EventArgs e)
        {
            cbFeeTypePreviousValue = (MMFeeTypeStruct)cbFeeType.SelectedItem;
        }

        private void btnAutoGenerateData_Click(object sender, RoutedEventArgs e)
        {
            if(btnAutoGenerateData.Content.ToString() == "自動データ作成")
            {
                observableFees = DatabaseHandler.AutoGetFee(FeeName, cbFeeType.Text, (int)cbYear.SelectedItem);
                if (observableFees == null)
                {
                    MessageBox.Show("参考データがありません。");
                    return;
                }
                gridFee.ItemsSource = observableFees;
                btnSave.IsEnabled = true;
                btnPrint.IsEnabled = true;
                btnAutoGenerateData.Content = "データ削除";
            }
            else if(btnAutoGenerateData.Content.ToString() == "データ削除")
            {
                foreach(var temp in observableFees)
                {
                    temp.Month1 = 0;
                    temp.Month2 = 0;
                    temp.Month3 = 0;
                    temp.Month4 = 0;
                    temp.Month5 = 0;
                    temp.Month6 = 0;
                    temp.Month7 = 0;
                    temp.Month8 = 0;
                    temp.Month9 = 0;
                    temp.Month10 = 0;
                    temp.Month11 = 0;
                    temp.Month12 = 0;
                    temp.Sum = 0;
                }
                btnAutoGenerateData.IsEnabled = false;
                btnAutoGenerateData.Content = "自動データ作成";
            }
        }

        private void CommandBinding_CanExecute(object sender, System.Windows.Input.CanExecuteRoutedEventArgs e)
        {
            if(int.TryParse(Clipboard.GetText(), out int _))
                e.CanExecute = true;
            else
                e.CanExecute = false;

            e.Handled = true;
        }

        private void Paste(object sender, System.Windows.Input.ExecutedRoutedEventArgs e)
        {
            if (!int.TryParse(Clipboard.GetText(), out int pasteValue)) return;

            btnSave.IsEnabled = true;

            var dataGridCellInfos = gridFee.SelectedCells;

            foreach (var dataGridCellInfo in dataGridCellInfos)
            {

                MMFee mMFee = (MMFee)dataGridCellInfo.Item;

                if (mMFee.Department == "合計") continue;

                string header = dataGridCellInfo.Column.Header.ToString();

                if (header.Contains("１０月")) mMFee.Month10 = pasteValue;
                else if (header.Contains("１１月")) mMFee.Month11 = pasteValue;
                else if (header.Contains("１２月")) mMFee.Month12 = pasteValue;
                else if (header.Contains("１月")) mMFee.Month1 = pasteValue;
                else if (header.Contains("２月")) mMFee.Month2 = pasteValue;
                else if (header.Contains("３月")) mMFee.Month3 = pasteValue;
                else if (header.Contains("４月")) mMFee.Month4 = pasteValue;
                else if (header.Contains("５月")) mMFee.Month5 = pasteValue;
                else if (header.Contains("６月")) mMFee.Month6 = pasteValue;
                else if (header.Contains("７月")) mMFee.Month7 = pasteValue;
                else if (header.Contains("８月")) mMFee.Month8 = pasteValue;
                else if (header.Contains("９月")) mMFee.Month9 = pasteValue;
            }

            DatabaseHandler.UpdateSumInFee(ref observableFees);

        }

        private void btnPrint_Click(object sender, RoutedEventArgs e)
        {
            if (observableFees == null) return;
            ExcelHandler.ExportExcelFee(observableFees);
        }

        private void GridSplitter_MouseDoubleClick(object sender, System.Windows.Input.MouseButtonEventArgs e)
        {
            if (colControl.Width != new GridLength(0))
                colControl.Width = new GridLength(0);
            else
                colControl.Width = new GridLength(300);
        }

        private void btnColumnSetup_Click(object sender, RoutedEventArgs e)
        {

            if(btnColumnSetup.Content.ToString() != "全列表示")
            {
                WindowSetup windowSetup = new WindowSetup()
                {
                    FeeNameToSetField = FeeName
                };
                _ = windowSetup.ShowDialog();

                getGridFeeHeader();
            }

            if (colField1.Header != null)
            {
                colField1.Visibility = Visibility.Visible;
            }

            if (colField2.Header != null)
            {
                colField2.Visibility = Visibility.Visible;
            }

            if (colField3.Header != null)
            {
                colField3.Visibility = Visibility.Visible;
            }

            if (colField4.Header != null)
            {
                colField4.Visibility = Visibility.Visible;
            }

            if (colField5.Header != null)
            {
                colField5.Visibility = Visibility.Visible;
            }

            if (colField6.Header != null)
            {
                colField6.Visibility = Visibility.Visible;
            }

            if (colField7.Header != null)
            {
                colField7.Visibility = Visibility.Visible;
            }

            if (colField8.Header != null)
            {
                colField8.Visibility = Visibility.Visible;
            }

            if (colField9.Header != null)
            {
                colField9.Visibility = Visibility.Visible;
            }

            btnColumnSetup.Content = "列設定";

        }
    }
}
